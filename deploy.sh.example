#!/bin/bash
# Deployment script for Telegram Coffee Shop Order Bot

# Configuration
SERVER_USER="username"
SERVER_IP="serverip"
SERVER_PATH="path_to_static_deploy"
PROJECT_NAME="telegram-coffee-demo"
BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-"your_telegram_bot_token_here"}

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Starting deployment of ${PROJECT_NAME}...${NC}"

# Step 1: Build the project
echo -e "${YELLOW}Building the project...${NC}"
npm run build
if [ $? -ne 0 ]; then
    echo -e "${RED}Build failed. Aborting deployment.${NC}"
    exit 1
fi
echo -e "${GREEN}Build successful.${NC}"

# Step 2: Create deployment directory
echo -e "${YELLOW}Creating deployment package...${NC}"
DEPLOY_DIR="deploy"
rm -rf $DEPLOY_DIR
mkdir -p $DEPLOY_DIR

# Step 3: Copy necessary files to deployment directory
mkdir -p $DEPLOY_DIR/dist

# Copy dist directory contents or create empty directory
if [ -d "dist" ]; then
    cp -r dist/* $DEPLOY_DIR/dist/
else
    echo -e "${YELLOW}Warning: dist directory not found. Running build...${NC}"
    npm run build
    if [ -d "dist" ]; then
        cp -r dist/* $DEPLOY_DIR/dist/
    else
        echo -e "${RED}Error: Build failed. No dist directory created.${NC}"
        exit 1
    fi
fi

# Copy package files
cp package.json package-lock.json $DEPLOY_DIR/

# Copy .env.example if it exists
if [ -f ".env.example" ]; then
    cp .env.example $DEPLOY_DIR/
else
    echo -e "${YELLOW}Warning: .env.example not found. Creating a default one...${NC}"
    cat > $DEPLOY_DIR/.env.example << EOF
# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Environment Configuration
NODE_ENV=production

# Server Configuration
PORT=3000
WEBHOOK_DOMAIN=your-domain.com
WEBHOOK_PATH=/webhook/telegram

# Logging Configuration
LOG_LEVEL=info
EOF
fi

# Copy README
if [ -f "README.md" ]; then
    cp README.md $DEPLOY_DIR/
fi

# Create a proper .env file for production
cat > $DEPLOY_DIR/.env << EOF
# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=$BOT_TOKEN

# Environment Configuration
NODE_ENV=production

# Server Configuration
PORT=3000
WEBHOOK_DOMAIN=your-domain
WEBHOOK_PATH=/webhook/telegram

# Logging Configuration
LOG_LEVEL=info
EOF

# Create a copy of .env as .env.example in case it's needed
cp $DEPLOY_DIR/.env $DEPLOY_DIR/.env.example

# Create a simple index.html file for the web server
cat > $DEPLOY_DIR/index.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Telegram Coffee Shop Bot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            color: #0088cc;
        }
        .container {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .qr-placeholder {
            background-color: #f5f5f5;
            height: 200px;
            width: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 20px auto;
            border: 1px dashed #ccc;
        }
        .steps {
            margin-top: 20px;
        }
        .steps ol {
            padding-left: 20px;
        }
        .footer {
            margin-top: 40px;
            font-size: 0.8em;
            color: #666;
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>Telegram Coffee Shop Bot</h1>
    <p>Welcome to the Telegram Coffee Shop Bot demo. This bot allows you to order coffee using natural language.</p>
    
    <div class="container">
        <h2>Try the Bot</h2>
        <div class="qr-placeholder">
            [QR Code Placeholder]
        </div>
        <p style="text-align: center;">Scan the QR code or <a href="https://t.me/YourBotUsername" target="_blank">click here</a> to start chatting with the bot.</p>
        
        <div class="steps">
            <h3>How to Use:</h3>
            <ol>
                <li>Start a chat with the bot</li>
                <li>Type your order in natural language (e.g., "1 large cappuccino with oat milk")</li>
                <li>Receive your order confirmation with pricing and pickup details</li>
            </ol>
        </div>
    </div>
    
    <div class="footer">
        <p>Telegram Coffee Shop Bot Demo | Deployed on: $(date)</p>
    </div>
</body>
</html>
EOF

# Step 4: Create a startup script
cat > $DEPLOY_DIR/start.sh << EOF
#!/bin/bash
# Check if Node.js and npm are installed
if ! command -v node &> /dev/null; then
    echo "Node.js is not installed. Please run the install.sh script first."
    exit 1
fi

# Check if dependencies are installed
if [ ! -d "node_modules" ]; then
    echo "Installing dependencies..."
    npm install --only=production
fi

# Set up environment if .env doesn't exist
if [ ! -f .env ]; then
    if [ -f .env.example ]; then
        cp .env.example .env
        echo "Created .env from .env.example. Please update with your Telegram bot token."
    else
        echo "ERROR: .env.example not found. Cannot create .env file."
        exit 1
    fi
fi

# Check if the bot.js file exists
if [ ! -f dist/bot.js ]; then
    echo "ERROR: dist/bot.js not found. The application may not have been built correctly."
    exit 1
fi

# Start the bot
echo "Starting Telegram Coffee Shop Bot..."
node dist/bot.js
EOF

# Make the startup script executable
chmod +x $DEPLOY_DIR/start.sh

# Step 5: Create a systemd service file
cat > $DEPLOY_DIR/telegram-coffee-bot.service << EOF
[Unit]
Description=Telegram Coffee Shop Bot
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory=static-path/bot
ExecStart=/bin/bash /static-path/start.sh
StandardOutput=journal
StandardError=journal
SyslogIdentifier=telegram-coffee-bot
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

echo -e "${GREEN}Deployment package created.${NC}"

# Step 6: Create an installation script for the server
cat > $DEPLOY_DIR/install.sh << EOF
#!/bin/bash

# Install Node.js and npm if not already installed
if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
    echo "Installing Node.js and npm..."
    curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
    sudo apt-get install -y nodejs
fi

# Install dependencies
cd static-path/bot
npm install --only=production

# Set up environment if .env doesn't exist
if [ ! -f .env ]; then
    if [ -f .env.example ]; then
        cp .env.example .env
        echo "Created .env from .env.example"
    else
        echo "Warning: .env.example not found. Creating a default .env file..."
        cat > .env << \INNEREOF
# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Environment Configuration
NODE_ENV=production

# Server Configuration
PORT=3000
WEBHOOK_DOMAIN=your-domain
WEBHOOK_PATH=/webhook/telegram

# Logging Configuration
LOG_LEVEL=info
INNEREOF
        echo "Created default .env file. Please update with your Telegram bot token."
    fi
fi

# Make the start script executable
chmod +x start.sh

# Set up the systemd service
sudo mv /tmp/telegram-coffee-bot.service /etc/systemd/system/
sudo systemctl daemon-reload
sudo systemctl enable telegram-coffee-bot
sudo systemctl restart telegram-coffee-bot

echo "Installation completed!"
EOF

chmod +x $DEPLOY_DIR/install.sh

# Step 7: Transfer files to the server
echo -e "${YELLOW}Transferring files to the server...${NC}"
# Create the bot directory on the server
ssh $SERVER_USER@$SERVER_IP "mkdir -p $SERVER_PATH/bot"

# Transfer the deployment package
echo -e "${YELLOW}Transferring web files...${NC}"
scp $DEPLOY_DIR/index.html $SERVER_USER@$SERVER_IP:$SERVER_PATH/

echo -e "${YELLOW}Transferring bot files...${NC}"
scp -r $DEPLOY_DIR/* $SERVER_USER@$SERVER_IP:$SERVER_PATH/bot/

echo -e "${YELLOW}Transferring service files...${NC}"
scp $DEPLOY_DIR/telegram-coffee-bot.service $SERVER_USER@$SERVER_IP:/tmp/
scp $DEPLOY_DIR/install.sh $SERVER_USER@$SERVER_IP:/tmp/

# Verify files were transferred
echo -e "${YELLOW}Verifying file transfer...${NC}"
ssh $SERVER_USER@$SERVER_IP "ls -la $SERVER_PATH/bot/"

# Step 8: Run the installation script on the server
echo -e "${YELLOW}Setting up the service on the server...${NC}"
ssh $SERVER_USER@$SERVER_IP "bash /tmp/install.sh"

# Step 9: Check the service status
echo -e "${YELLOW}Checking service status...${NC}"
ssh $SERVER_USER@$SERVER_IP "sudo systemctl status telegram-coffee-bot"

echo -e "${GREEN}Deployment completed successfully!${NC}"
echo -e "${YELLOW}Website URL: https:/your-domain${NC}"
echo -e "${YELLOW}Bot service status: ssh $SERVER_USER@$SERVER_IP 'sudo systemctl status telegram-coffee-bot'${NC}"
echo -e "${YELLOW}Bot logs: ssh $SERVER_USER@$SERVER_IP 'sudo journalctl -u telegram-coffee-bot'${NC}"

# Clean up
rm -rf $DEPLOY_DIR